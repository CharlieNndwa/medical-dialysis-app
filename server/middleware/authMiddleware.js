// FILE: middleware/authMiddleware.js (FIXED FOR 'jwt malformed' ERROR)

const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
Â  Â  // 1. Extract the token from 'x-auth-token' or 'Authorization: Bearer <token>'
Â  Â  const authHeader = req.headers['authorization'];
    
    // Check for 'x-auth-token' header first
    let token = req.header('x-auth-token'); 
    
    // If not found, check the 'Authorization: Bearer <token>' header
    if (!token && authHeader) {
        const parts = authHeader.split(' ');
        // Ensure it has two parts (Bearer and Token)
        if (parts.length === 2 && parts[0].toLowerCase() === 'bearer') {
            token = parts[1];
        }
    }
Â  Â  
Â  Â  // ðŸŽ¯ CRITICAL FIX: Explicitly check for falsy values AND the string 'null'
Â  Â  if (!token || token.toLowerCase() === 'null' || token.toLowerCase() === 'undefined') {
Â  Â  Â  Â  // This ensures that if the frontend sends "Bearer null", we fail gracefully
Â  Â  Â  Â  return res.status(401).json({ msg: 'Access denied. No valid token provided.' });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const decoded = jwt.verify(token, process.env.JWT_SECRET);
Â  Â  Â  Â  // Attach the decoded user payload to the request object
Â  Â  Â  Â  req.user = decoded.user; 
Â  Â  Â  Â  next();
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Token verification error:', err.message);
        // The error will be 'jwt malformed' if the token is garbage, 
        // but now it won't be caused by the string "null".
Â  Â  Â  Â  return res.status(401).json({ msg: 'Token is not valid or expired' });
Â  Â  }
};